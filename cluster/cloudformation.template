{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "ECS: Cluster with autoscaling group and integrated datadog monitoring. Optimized for use with infra-buddy",
  "Parameters": {
    "Environment": {
      "Description": "The environment this cluster is for.",
      "Type": "String"
    },
    "Application": {
      "Description": "The application this cluster is for.",
      "Type": "String"
    },
    "ShortApplicationName": {
      "Description": "The vpc application name this cluster is for.",
      "Type": "String"
    },
    "Role": {
      "Description": "The role which should always be 'cluster' in the infra-buddy usecases.",
      "Type": "String"
    },
    "VPCStack": {
      "Description": "The stack name of the vpc deployed by infra-buddy that will be the target of this cluster.",
      "Type": "String"
    },
    "OptionalDomain": {
      "Description": "The domain to override the primary domain set in the VPC export",
      "Type": "String"
    },
    "OptionalCertificateARN": {
      "Description": "The certificate ARN for the override of the primary domain set in the VPC export",
      "Type": "String"
    }
  },
  "Conditions": {
    "UseDefaultDomain": {
      "Fn::Equals": [
        {
          "Ref": "OptionalDomain"
        },
        ""
      ]
    }
  },
  "Resources": {
    "ELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Elastic Load Balancer Security Group",
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${VPCStack}-VPC"
          }
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0",
            "FromPort": 1,
            "ToPort": 65535
          }
        ]
      }
    },
    "EcsElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Scheme": "internet-facing",
        "Subnets": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${VPCStack}-SubnetAPub"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${VPCStack}-SubnetBPub"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${VPCStack}-SubnetCPub"
            }
          }
        ],
        "LoadBalancerAttributes": [
          {
            "Key": "access_logs.s3.enabled",
            "Value": "true"
          },
          {
            "Key": "access_logs.s3.bucket",
            "Value": {
              "Fn::Sub": "${Environment}-${ShortApplicationName}-logs"
            }
          },
          {
            "Key": "access_logs.s3.prefix",
            "Value": {
              "Fn::Sub": "${Application}/${Environment}"
            }
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "ELBSecurityGroup"
          }
        ],
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "Application"
            }
          },
          {
            "Key": "Role",
            "Value": {
              "Ref": "Role"
            }
          }
        ]
      }
    },
    "ELBHTTPListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "DefaultTargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "EcsElasticLoadBalancer"
        },
        "Port": 80,
        "Protocol": "HTTP"
      }
    },
    "ELBHTTPSListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "DefaultTargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "EcsElasticLoadBalancer"
        },
        "Port": 443,
        "Protocol": "HTTPS",
        "Certificates": [
          {
            "CertificateArn": {
              "Fn::If": [
                "UseDefaultDomain",
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": "${VPCStack}-PrimaryCertificate"
                  }
                },
                {
                  "Ref": "OptionalCertificateARN"
                }
              ]
            }
          }
        ]
      }
    },
    "DefaultTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckPath": "/health",
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 10,
        "HealthyThresholdCount": 5,
        "UnhealthyThresholdCount": 2,
        "TargetType":"ip",
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "45"
          }
        ],
        "Matcher": {
          "HttpCode": "200"
        },
        "Port": 80,
        "Protocol": "HTTP",
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${VPCStack}-VPC"
          }
        }
      }
    },
    "ECSCluster": {
      "Type": "AWS::ECS::Cluster"
    },
    "FargateTaskAccessPolicy": {
      "Type" : "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Path" : "/",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "ecr:*",
                "ecs:*",
                "sqs:*",
                "logs:*",
                "cloudwatch:*",
                "s3:*",
                "secretsmanager:GetSecretValue",
                "kms:Decrypt"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "primarydns": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::If": [
                  "UseDefaultDomain",
                  {
                    "Fn::ImportValue": {
                      "Fn::Sub": "${VPCStack}-PrimaryDomain"
                    }
                  },
                  {
                    "Ref": "OptionalDomain"
                  }
                ]
              },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::Sub": "${Environment}-${Application}."
              },
              {
                "Fn::If": [
                  "UseDefaultDomain",
                  {
                    "Fn::ImportValue": {
                      "Fn::Sub": "${VPCStack}-PrimaryDomain"
                    }
                  },
                  {
                    "Ref": "OptionalDomain"
                  }
                ]
              }
            ]
          ]
        },
        "Type": "CNAME",
        "TTL": 900,
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "EcsElasticLoadBalancer",
              "DNSName"
            ]
          }
        ]
      }
    }
  },
  "Outputs": {
    "PrimaryDNS": {
      "Value": {
        "Fn::Join": [
          "",
          [
            {
              "Fn::Sub": "${Environment}-${Application}."
            },
            {
              "Fn::If": [
                "UseDefaultDomain",
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": "${VPCStack}-PrimaryDomain"
                  }
                },
                {
                  "Ref": "OptionalDomain"
                }
              ]
            }
          ]
        ]
      },
      "Description": "DNS entry for the ELB to access the services.",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-PrimaryDNS"
        }
      }
    },
    "ElasticLoadBalancerDNS": {
      "Description": "The DNSName of the load balancer",
      "Value": {
        "Fn::GetAtt": [
          "EcsElasticLoadBalancer",
          "DNSName"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ElasticLoadBalancerDNS"
        }
      }
    },
    "ElasticLoadBalancerARN": {
      "Description": "The ARN of the load balancer",
      "Value": {
        "Ref": "EcsElasticLoadBalancer"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ElasticLoadBalancerARN"
        }
      }
    },
    "ListenerARN": {
      "Description": "The ARN of the HTTP listener connected to the Application ELB.",
      "Value": {
        "Ref": "ELBHTTPListener"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ListenerARN"
        }
      }
    },
    "LoadBalancerSGARN": {
      "Description": "The ARN of the SecurityGroup attached to the Application ELB.",
      "Value": {
        "Ref": "ELBSecurityGroup"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-LoadBalancerSecurityGroupARN"
        }
      }
    },
    "HTTPSListenerARN": {
      "Description": "The ARN of the HTTP listener connected to the Application ELB.",
      "Value": {
        "Ref": "ELBHTTPSListener"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-HTTPSListenerARN"
        }
      }
    },
    "DefaultTargetGroup": {
      "Description": "The ARN of the default target group associated with the HTTP listener.",
      "Value": {
        "Ref": "DefaultTargetGroup"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-DefaultTargetGroup"
        }
      }
    },
    "FargateTaskAccessPolicy": {
      "Description": "Access policy meant to grant access to containers when running in Fargate",
      "Value": {
        "Ref": "FargateTaskAccessPolicy"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-FargateTaskAccessPolicy"
        }
      }
    }
  }
}
